import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import os
import numpy as np
import scipy.stats
from scipy.stats import shapiro
sns.set()
import statistics

path=r"D:\Luba\project_deadtrees_factoring\MyProject6\NDVI_ground_points"
os.chdir(path)

points_defoliated_dt = pd.read_csv('defoliated_points_2.csv')
point_n_defoliated_dt = pd.read_csv('non_defoliated_points_2.csv')
point_parking_dt = pd.read_csv('parking_points.csv')

points_defoliated_dt.drop(["OID_"], axis=1, inplace=True)
points_defoliated_dt.drop(['2016_senti', '2017_senti', '2015_07_11', '2017_08_01', '2016_NDVI'], axis=1, inplace=True)
point_n_defoliated_dt.drop(["OID_"], axis=1, inplace=True)
point_n_defoliated_dt.drop(['2016_senti', '2017_senti', '2015_07_11', '2017_08_01'], axis=1, inplace=True)
point_parking_dt.drop(["OID_"], axis=1, inplace=True)

list_years = list(points_defoliated_dt.columns.values)
print(list_years)

# sns.boxplot(x="variable", y="value", data=pd.melt(points_defoliated_dt))
# plt.show()
#
sns.boxplot(x="variable", y="value",  data=pd.melt(point_n_defoliated_dt))
plt.show()

for year in list_years:
    list_n_def = list()
    nondef_points = point_n_defoliated_dt[year].to_list()
    print(statistics.stdev(nondef_points))
    list_n_def.extend(nondef_points)
    print(list_n_def)
print(len(list_n_def))
print(statistics.stdev(list_n_def))

for year in list_years:
    list_n_def = list()
    def_points = points_defoliated_dt[year].to_list()
    print(statistics.stdev(def_points))
    list_n_def.extend(def_points)
    print(list_n_def)




lst = (0.46489, 0.439566, 0.473821, 0.447537, 0.448212, 0.434308, 0.41012, 0.393783, 0.407533, 0.455027, 0.375437, 0.451159, 0.418308, 0.408134, 0.351266, 0.385546, 0.407872, 0.409766, 0.424006, 0.366974, 0.456276, 0.427841, 0.451457, 0.468733, 0.481393, 0.168574, 0.157359, 0.478241, 0.481418, 0.466821, 0.466021, 0.476751, 0.46472, 0.437752, 0.467404, 0.468689, 0.477344, 0.470971, 0.431681, 0.420893, 0.434001, 0.429227, 0.431218, 0.435731, 0.441215, 0.436051, 0.440473, 0.442717, 0.445858, 0.418667, 0.453037, 0.462934, 0.44615, 0.4316, 0.439583, 0.429974, 0.432063, 0.429491, 0.440194, 0.455762, 0.2944, 0.423115, 0.35361, 0.296839, 0.441331, 0.452742, 0.33059, 0.474667, 0.460518, 0.431551, 0.449983, 0.45148, 0.434069, 0.449342, 0.446353, 0.453038, 0.472795, 0.439361, 0.467019, 0.457426, 0.466253, 0.448742, 0.466653, 0.436565, 0.448829, 0.433951, 0.426588, 0.452663, 0.470643, 0.482729, 0.402436, 0.434073, 0.429234, 0.447058, 0.434284, 0.432205, 0.44589, 0.4405, 0.475677, 0.377253,
0.313481, 0.28556, 0.452589, 0.425856, 0.41144, 0.416515, 0.402471, 0.408111, 0.405337, 0.429307, 0.343443, 0.425934, 0.411202, 0.413925, 0.36111, 0.377936, 0.405182, 0.370541, 0.38602, 0.349757, 0.408171, 0.401507, 0.408655, 0.393978, 0.423298, 0.326723, 0.371686, 0.405703, 0.405703, 0.380962, 0.413165, 0.392572, 0.398977, 0.389969, 0.387083, 0.387319, 0.390594, 0.39603, 0.35006, 0.370555, 0.391712, 0.36863, 0.391014, 0.396815, 0.394052, 0.387544, 0.405449, 0.39657, 0.396592, 0.358271, 0.409245, 0.40643, 0.396786, 0.388876, 0.417607, 0.403427, 0.414521, 0.414408, 0.415932, 0.415902, 0.301375, 0.377741, 0.321136, 0.288981, 0.386701, 0.422165, 0.320864, 0.402905, 0.411949, 0.406307, 0.381669, 0.406333, 0.409368, 0.394405, 0.400402, 0.417406, 0.4396, 0.403593, 0.430673, 0.414923, 0.42872, 0.394232, 0.441145, 0.373638, 0.385369, 0.348047, 0.360435, 0.436056, 0.425274, 0.463439, 0.357394, 0.389609, 0.391218, 0.390412, 0.385053, 0.376346, 0.405569, 0.404263, 0.425018, 0.337528,
0.455387, 0.442633, 0.465373, 0.41667, 0.428782, 0.445258, 0.428091, 0.416975, 0.411861, 0.449522, 0.374185, 0.426007, 0.42583, 0.414049, 0.371283, 0.412646, 0.426085, 0.431104, 0.420562, 0.36816, 0.45512, 0.424882, 0.44994, 0.455707, 0.478606, 0.345834, 0.416639, 0.457712, 0.455762, 0.447662, 0.46643, 0.45485, 0.457866, 0.435185, 0.44825, 0.457266, 0.480658, 0.462658, 0.369902, 0.370616, 0.400234, 0.372963, 0.394617, 0.389045, 0.388686, 0.394692, 0.400708, 0.394768, 0.409253, 0.36102, 0.44278, 0.440251, 0.421607, 0.416391, 0.434474, 0.41599, 0.426748, 0.421465, 0.424281, 0.434622, 0.304957, 0.418686, 0.354673, 0.299153, 0.426857, 0.454737, 0.338458, 0.445125, 0.442479, 0.437456, 0.418719, 0.442499, 0.44041, 0.423888, 0.4321, 0.452461, 0.457289, 0.42694, 0.463955, 0.439291, 0.458839, 0.439729, 0.468335, 0.421519, 0.431948, 0.40761, 0.418827, 0.447282, 0.429544, 0.468446, 0.421973, 0.429491, 0.427115, 0.429618, 0.416295, 0.43342, 0.428318, 0.434201, 0.470782, 0.380226,
0.434336, 0.436387, 0.439943, 0.407869, 0.406456, 0.420263, 0.408253, 0.393742, 0.388311, 0.428761, 0.352844, 0.420476, 0.403317, 0.391668, 0.359096, 0.391227, 0.409383, 0.40608, 0.40965, 0.360321, 0.420951, 0.381039, 0.389514, 0.42231, 0.443823, 0.33822, 0.388445, 0.42833, 0.437223, 0.416864, 0.436017, 0.425705, 0.414481, 0.399394, 0.417047, 0.419927, 0.430998, 0.422659, 0.291198, 0.310597, 0.31638, 0.297834, 0.324198, 0.320255, 0.320396, 0.324282, 0.331921, 0.328151, 0.329523, 0.29767, 0.38412, 0.387302, 0.358089, 0.384044, 0.40003, 0.377989, 0.408985, 0.405949, 0.410708, 0.395364, 0.310427, 0.395031, 0.334097, 0.296613, 0.398013, 0.41009, 0.327771, 0.38541, 0.375953, 0.40116, 0.3759, 0.412792, 0.406726, 0.397953, 0.394808, 0.412404, 0.431807, 0.409344, 0.429255, 0.408639, 0.42313, 0.409546, 0.436961, 0.387708, 0.394141, 0.376854, 0.398456, 0.426329, 0.37423, 0.430831, 0.400744, 0.404087, 0.40627, 0.426003, 0.37482, 0.403254, 0.395668, 0.419545, 0.455092, 0.353444,
0.480579, 0.455095, 0.484016, 0.433421, 0.409547, 0.446491, 0.435721, 0.43525, 0.435957, 0.39707, 0.393825, 0.438605, 0.439473, 0.436625, 0.388473, 0.437644, 0.413208, 0.440003, 0.427902, 0.395986, 0.460364, 0.436869, 0.454727, 0.446944, 0.476862, 0.33742, 0.409471, 0.453077, 0.463096, 0.45839, 0.487638, 0.461429, 0.467205, 0.440838, 0.452754, 0.450834, 0.453608, 0.43333, 0.421122, 0.425766, 0.428899, 0.422052, 0.418844, 0.431149, 0.429677, 0.42554, 0.437927, 0.435736, 0.433984, 0.404359, 0.456818, 0.438543, 0.441999, 0.436709, 0.442039, 0.432228, 0.444325, 0.453141, 0.438574, 0.45412, 0.330266, 0.421241, 0.353803, 0.306632, 0.425317, 0.458454, 0.344085, 0.468812, 0.445266, 0.43503, 0.409211, 0.43618, 0.444394, 0.438085, 0.435965, 0.455737, 0.477531, 0.438358, 0.461126, 0.43908, 0.460884, 0.437292, 0.466501, 0.424441, 0.434162, 0.412914, 0.431741, 0.464639, 0.461242, 0.495214, 0.442004, 0.449991, 0.446349, 0.445356, 0.417748, 0.426658, 0.438923, 0.454849, 0.474955, 0.379158,
0.458339, 0.478832, 0.443909, 0.435398, 0.421015, 0.412612, 0.467952, 0.459401, 0.451036, 0.457652, 0.465044, 0.467082, 0.473653, 0.457997, 0.442382, 0.447299, 0.447674, 0.446584, 0.46249, 0.457492, 0.46948, 0.448866, 0.466394, 0.468636, 0.414565, 0.457844, 0.432488, 0.461039, 0.47584, 0.46482, 0.459042, 0.4688, 0.448109, 0.470037, 0.456034, 0.443917, 0.433572, 0.442027, 0.446981, 0.443403, 0.440897, 0.43358, 0.459801, 0.426673, 0.463556, 0.453188, 0.462552, 0.480341, 0.472868, 0.483211, 0.455401, 0.470507, 0.403428, 0.453297, 0.435403, 0.463699, 0.467968, 0.434897, 0.467801, 0.462889, 0.475991, 0.466092, 0.475039, 0.432318, 0.490408, 0.477497, 0.479061, 0.487835, 0.466703, 0.459621, 0.45044, 0.468995, 0.470817, 0.461213, 0.459603, 0.471028, 0.460897, 0.453756, 0.467777, 0.465447, 0.46757, 0.473739, 0.460346, 0.434103, 0.468557, 0.467906, 0.473691, 0.429947, 0.452295, 0.463918, 0.44289, 0.471244, 0.458393, 0.470526, 0.457488, 0.45718, 0.478377, 0.458647, 0.448006, 0.450577,
0.382608, 0.406794, 0.372692, 0.361512, 0.380094, 0.354877, 0.433194, 0.421171, 0.377994, 0.385469, 0.421723, 0.418688, 0.393348, 0.406972, 0.353627, 0.362193, 0.361879, 0.415883, 0.416732, 0.419107, 0.436123, 0.418709, 0.400651, 0.389328, 0.39034, 0.422303, 0.347162, 0.378082, 0.399454, 0.414521, 0.408069, 0.412851, 0.382582, 0.43496, 0.359091, 0.391331, 0.378788, 0.37276, 0.381045, 0.366175, 0.379585, 0.393492, 0.42201, 0.366117, 0.378088, 0.423585, 0.41251, 0.426358, 0.41443, 0.426564, 0.393113, 0.401723, 0.392922, 0.406399, 0.404914, 0.41514, 0.430646, 0.403354, 0.428306, 0.366388, 0.389103, 0.384707, 0.391558, 0.377787, 0.463381, 0.445406, 0.440655, 0.438943, 0.408939, 0.418704, 0.410849, 0.431071, 0.432895, 0.438672, 0.433549, 0.453354, 0.404453, 0.42874, 0.449242, 0.422838, 0.43648, 0.4493, 0.429918, 0.397749, 0.433016, 0.418037, 0.451618, 0.415622, 0.426247, 0.431591, 0.426357, 0.258294, 0.310432, 0.280484, 0.254124, 0.263964, 0.344945, 0.311881, 0.266263, 0.2045,
0.436926, 0.454712, 0.369165, 0.40999, 0.422763, 0.397324, 0.492429, 0.478043, 0.454898, 0.4645, 0.476277, 0.479123, 0.47528, 0.458093, 0.447565, 0.457387, 0.45296, 0.323668, 0.461204, 0.465952, 0.482559, 0.469298, 0.426682, 0.414189, 0.420694, 0.438878, 0.389938, 0.393405, 0.4446, 0.454033, 0.44903, 0.42598, 0.397117, 0.449697, 0.3903, 0.401565, 0.396414, 0.400104, 0.403929, 0.413978, 0.409848, 0.396595, 0.424963, 0.394864, 0.467619, 0.454009, 0.448441, 0.467154, 0.473433, 0.474128, 0.430674, 0.461516, 0.430716, 0.418128, 0.438519, 0.460531, 0.472111, 0.428338, 0.466571, 0.31765, 0.47307, 0.467485, 0.47327, 0.443681, 0.489331, 0.481181, 0.474924, 0.474807, 0.451158, 0.446043, 0.448716, 0.464014, 0.471525, 0.464569, 0.462503, 0.467803, 0.444198, 0.438682, 0.468348, 0.451348, 0.477569, 0.477027, 0.461497, 0.424909, 0.454515, 0.473812, 0.477159, 0.452192, 0.432673, 0.455396, 0.452434, 0.46817, 0.460902, 0.477249, 0.462933, 0.461644, 0.472728, 0.453942, 0.441464, 0.440964,
0.38732, 0.422413, 0.309776, 0.365024, 0.349885, 0.345482, 0.467307, 0.450662, 0.424749, 0.43605, 0.456121, 0.464261, 0.457033, 0.437234, 0.42662, 0.438494, 0.441092, 0.433129, 0.446458, 0.444687, 0.451819, 0.438387, 0.366279, 0.335446, 0.38742, 0.385078, 0.309942, 0.309648, 0.362068, 0.41589, 0.388643, 0.368041, 0.336831, 0.392842, 0.309775, 0.329572, 0.332843, 0.33867, 0.337738, 0.370185, 0.334084, 0.327301, 0.346911, 0.345637, 0.444253, 0.433745, 0.422058, 0.445728, 0.448366, 0.451016, 0.40752, 0.453753, 0.40157, 0.357066, 0.394018, 0.423308, 0.445129, 0.395062, 0.453384, 0.403692, 0.453893, 0.451213, 0.443066, 0.419522, 0.458868, 0.458936, 0.447565, 0.447724, 0.430082, 0.429346, 0.42298, 0.445057, 0.437854, 0.450861, 0.447874, 0.45162, 0.400914, 0.415438, 0.445203, 0.433344, 0.454466, 0.448826, 0.443976, 0.406235, 0.436073, 0.449381, 0.464377, 0.447373, 0.406677, 0.432008, 0.431478, 0.442377, 0.435077, 0.455338, 0.437391, 0.432137, 0.441188, 0.435869, 0.410586, 0.395725,
0.428765, 0.453431, 0.429349, 0.43627, 0.444417, 0.409384, 0.481636, 0.462945, 0.430943, 0.459458, 0.484369, 0.494662, 0.475257, 0.463592, 0.438304, 0.451792, 0.448834, 0.455934, 0.459491, 0.465475, 0.4743, 0.469522, 0.451888, 0.451892, 0.441224, 0.450443, 0.442725, 0.436855, 0.459304, 0.464633, 0.45368, 0.449324, 0.434479, 0.459581, 0.442153, 0.430376, 0.427998, 0.429489, 0.451875, 0.422868, 0.420623, 0.446593, 0.450568, 0.419268, 0.472929, 0.457517, 0.466729, 0.472219, 0.478972, 0.485298, 0.443487, 0.476962, 0.458898, 0.431839, 0.436843, 0.453142, 0.473936, 0.442464, 0.478372, 0.428663, 0.487582, 0.480384, 0.471068, 0.448639, 0.488555, 0.47683, 0.484068, 0.475041, 0.47339, 0.465816, 0.464181, 0.477384, 0.479226, 0.467971, 0.475148, 0.478272, 0.450133, 0.459937, 0.478753, 0.467901, 0.472224, 0.476033, 0.474566, 0.429696, 0.469148, 0.459283, 0.47953, 0.439498, 0.425409, 0.47177, 0.447008, 0.485626, 0.468282, 0.485667, 0.479482, 0.473194, 0.480542, 0.473183, 0.466291, 0.441903)

print(statistics.stdev(lst))





#
# sns.boxplot(x="variable", y="value", data=pd.melt(point_parking_dt))
# plt.show()
#
# sns.regplot(x="2016", y="2016_sentinel", data=point_parking_dt)
# plt.show()
# #
# sns.regplot(x="2016_NDVI", y="2016_senti", data=point_n_defoliated_dt)
# plt.show()
#
# sns.regplot(x="2016_NDVI", y="2016_senti", data=points_defoliated_dt)
# plt.show()

#let's test normality of our data

# print("defoliated")
# for year in list_years:
#     stat, p = shapiro(points_defoliated_dt[year])
#     print('stat=%.3f, p=%.3f' % (stat, p))
#     if p > 0.05:
#         print(year +' Probably Gaussian\n')
#     else:
#         print(year +' Probably not Gaussian\n')
#
# print("non-defoliated")
# for year in list_years:
#     stat, p = shapiro(point_n_defoliated_dt[year])
#     print('stat=%.3f, p=%.3f' % (stat, p))
#     if p > 0.05:
#         print(year +' Probably Gaussian\n')
#     else:
#         print(year +' Probably not Gaussian\n')
#
# print("parking")
# for year in list_years:
#     stat, p = shapiro(point_parking_dt[year])
#     print('stat=%.3f, p=%.3f' % (stat, p))
#     if p > 0.05:
#         print(year +' Probably Gaussian\n')
#     else:
#         print(year +' Probably not Gaussian\n')

# #create 95% confidence interval for mean weight
print("For defoliated areas:")
for year in list_years:
    median = np.median(points_defoliated_dt[year])
    stDev = points_defoliated_dt[year].std()
    sterr = stDev / ((len(points_defoliated_dt[year])) ** 0.5)
    _CI_95 = [median - 1.96 * sterr, median + 1.96 * sterr]
    print("CI for ", year, _CI_95)

print("For non-defoliated areas:")
for year in list_years:
    median = np.median(point_n_defoliated_dt[year])
    stDev = point_n_defoliated_dt[year].std()
    sterr = stDev / ((len(point_n_defoliated_dt[year])) ** 0.5)
    _CI_95 = [median - 1.96 * sterr, median + 1.96 * sterr]
    print("CI for ", year, _CI_95)

print("For parking area:")
for year in list_years:
    median = np.median(point_parking_dt[year])
    stDev = point_parking_dt[year].std()
    sterr = stDev / ((len(point_parking_dt[year])) ** 0.5)
    _CI_95 = [median - 1.96 * sterr, median + 1.96 * sterr]
    print("CI for ", year, _CI_95)